/*
 * -------------------------------------------------
 *  nf-core/resolvinf Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performance compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // ResolVI-specific process configurations
    withLabel:process_gpu {
        accelerator = { params.num_gpus && params.num_gpus > 0 ? params.num_gpus : 1 }
        queue = 'gpu'
        clusterOptions = { params.num_gpus && params.num_gpus > 1 ? "--gres=gpu:${params.num_gpus}" : '--gres=gpu:1' }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'   ) }
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
    }

    // Process-specific configurations based on LSF script
    withName:RESOLVI_PREPROCESS {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }

    // Based on LSF script: 16 CPUs, 16GB per CPU (256GB total), 12h, 4 GPUs
    withName:RESOLVI_TRAIN {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
        accelerator = {
            if (params.num_gpus == null) {
                4  // Default to 4 GPUs as in LSF script
            } else if (params.num_gpus == -1) {
                'auto'  // Use all available
            } else if (params.num_gpus == 0) {
                0  // CPU only
            } else {
                params.num_gpus  // Use specified number
            }
        }
        queue = { params.num_gpus != 0 ? 'gpu' : 'normal' }
        clusterOptions = {
            if (params.num_gpus == null || params.num_gpus == 4) {
                '--gres=gpu:4 -R "span[hosts=1]" -R "rusage[mem=16G]"'
            } else if (params.num_gpus == -1) {
                '--gres=gpu -R "span[hosts=1]" -R "rusage[mem=16G]"'
            } else if (params.num_gpus == 0) {
                '-R "span[hosts=1]" -R "rusage[mem=16G]"'
            } else {
                "--gres=gpu:${params.num_gpus} -R \"span[hosts=1]\" -R \"rusage[mem=16G]\""
            }
        }
    }

    withName:RESOLVI_ANALYZE {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        accelerator = { params.num_gpus && params.num_gpus > 0 ? 1 : 0 }
        queue = { params.num_gpus && params.num_gpus > 0 ? 'gpu' : 'normal' }
        clusterOptions = { params.num_gpus && params.num_gpus > 0 ? '--gres=gpu:1' : '' }
    }

    withName:RESOLVI_VISUALIZE {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }

    withName:get_software_versions {
        cache = false
    }
}
