/*
 * -------------------------------------------------
 *  nf-core/resolvinf Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Input/output options
  input                      = null
  outdir                     = './results'

  // ResolVI workflow flags
  marker_genes              = null
  max_epochs                = 100
  num_samples               = 20
  num_gpus                  = null

  // Skip options
  skip_multiqc              = false

  // MultiQC options
  multiqc_config            = null
  multiqc_title             = null
  multiqc_logo              = null
  max_multiqc_email_size    = '25.MB'
  multiqc_methods_description = null

  // Boilerplate options
  name                      = null
  email                     = null
  email_on_fail             = null
  plaintext_email           = false
  monochrome_logs           = false
  hook_url                  = null
  help                      = false
  version                   = false
  publish_dir_mode          = 'copy'
  validate_params           = true
  show_hidden_params        = false
  schema_ignore_params      = 'genomes,igenomes_base'

  // Config options
  custom_config_version     = 'master'
  custom_config_base        = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_description = null
  config_profile_contact    = null
  config_profile_url        = null
  config_profile_name       = null

  // Max resource options
  max_memory                = '256.GB'
  max_cpus                  = 16
  max_time                  = '240.h'

  // Schema validation default options
  validationFailUnrecognisedParams = false
  validationLenientMode     = false
  validationSchemaIgnoreParams = 'genomes,igenomes_base'
  validationShowHiddenParams = false

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  debug {
    dumpHashes             = true
    process.beforeScript   = 'echo $HOSTNAME'
    cleanup                = false
  }
  conda {
    conda.enabled          = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
  }
  mamba {
    conda.enabled          = true
    conda.useMamba         = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    conda.enabled          = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
  }
  arm {
    docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
  }
  singularity {
    enabled          = true
    autoMounts       = true
    pullTimeout      = '4h'
    cacheDir         = System.getenv('SINGULARITY_CACHEDIR') ?: "${HOME}/.nextflow/singularity"
    conda.enabled    = false
    docker.enabled   = false
    podman.enabled   = false
    shifter.enabled  = false
    charliecloud.enabled = false
    apptainer.enabled    = false
  }
  podman {
    podman.enabled         = true
    conda.enabled          = false
    docker.enabled         = false
    singularity.enabled    = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
  }
  shifter {
    shifter.enabled        = true
    conda.enabled          = false
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
  }
  charliecloud {
    charliecloud.enabled   = true
    conda.enabled          = false
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    apptainer.enabled      = false
  }
  apptainer {
    apptainer.enabled      = true
    conda.enabled          = false
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  gitpod {
    executor.name          = 'local'
    executor.cpus          = 4
    executor.memory        = 15.GB
  }
  test      { includeConfig 'conf/test.config'      }
  test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/resolvinf'
    author          = """Christopher Tastad"""
    homePage        = 'https://github.com/nf-core/resolvinf'
    description     = """A Nextflow implementation of ResolVI for spatial transcriptomics data analysis"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
